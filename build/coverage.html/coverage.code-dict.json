{"/home/travis/build/npmtest/node-npmtest-block_io/test.js":"/* istanbul instrument in package npmtest_block_io */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-block_io/lib.npmtest_block_io.js":"/* istanbul instrument in package npmtest_block_io */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_block_io = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_block_io = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-block_io/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-block_io && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_block_io */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_block_io\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_block_io.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_block_io.rollup.js'] =\n            local.assetsDict['/assets.npmtest_block_io.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_block_io.__dirname + '/lib.npmtest_block_io.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-block_io/node_modules/block_io/lib/block_io.js":"var request = require('request');\nvar qs = require('querystring');\nvar pkgMeta = require('../package.json');\n\nvar helper = require('./helper');\nvar ECKey = require('./key');\n\nvar BlockIo = module.exports = function (config, pin, version, options) {\n\n  this.options = {\n    allowNoPin: false\n  };\n\n  if (typeof(config) === 'string') {\n\n    this.key = config;\n    this.version = version || BlockIo.DEFAULT_VERSION;\n    this.server = BlockIo.DEFAULT_SERVER;\n    this.port = BlockIo.DEFAULT_PORT;\n\n    if (pin) {\n      this.pin = pin;\n      this.aesKey = helper.pinToKey(this.pin);\n    }\n\n    if (options && typeof(options) == 'object') this._cloneOptions(options);\n\n  } else if (config && typeof(config) == 'object') {\n    this.key = config.api_key;\n    this.version = config.version || BlockIo.DEFAULT_VERSION;\n    this.server = config.server || BlockIo.DEFAULT_SERVER;\n    this.port = config.port || BlockIo.DEFAULT_PORT;\n\n    if (config.pin) {\n      this.pin = config.pin;\n      this.aesKey = helper.pinToKey(this.pin);\n    }\n\n    if (config.options) this._cloneOptions(config.options);\n  }\n};\n\n// link submodules / subclasses\nBlockIo.ECKey = ECKey;\nBlockIo.helper = helper;\n\nBlockIo.DEFAULT_VERSION = 2;\nBlockIo.DEFAULT_SERVER = '';\nBlockIo.DEFAULT_PORT = '';\nBlockIo.HOST = 'block.io';\n\n\n// Error messages\nvar ERR_KEY_INV = 'Error occurred validating key';\nvar ERR_PIN_MIS = 'Missing \"pin\", please supply as argument';\nvar ERR_PIN_INV = 'Public key mismatch. Invalid Secret PIN detected.';\nvar ERR_PK_EXTR = 'Could not extract privkey';\nvar ERR_WIF_MIS = 'Missing mandatory private_key argument';\nvar ERR_WIF_INV = 'Could not parse private_key as WIF';\nvar ERR_DEST_MIS = 'Missing mandatory to_address argument';\nvar ERR_UNKNOWN = 'Unknown error occured';\n\n// IF YOU EDIT THIS LIB, PLEASE BE A DARLING AND CHANGE THE USER AGENT :)\nBlockIo.USER_AGENT = ['npm','block_io', pkgMeta.version].join(':');\n\n// simple uniform methods that do not need special processing\nBlockIo.PASSTHROUGH_METHODS = [\n  'get_balance', 'get_new_address', 'get_my_addresses', 'get_address_received',\n  'get_address_by_label', 'get_address_balance', 'create_user', 'get_users',\n  'get_user_balance', 'get_user_address', 'get_user_received',\n  'get_current_price', 'is_green_address', 'is_green_transaction',\n  'get_transactions', 'sign_and_finalize_withdrawal', 'get_new_dtrust_address',\n  'get_my_dtrust_addresses', 'get_dtrust_address_by_label',\n  'get_dtrust_transactions', 'get_dtrust_address_balance',\n  'get_network_fee_estimate', 'archive_address', 'unarchive_address',\n  'get_my_archived_addresses', 'archive_dtrust_address',\n  'unarchive_dtrust_address', 'get_my_archived_dtrust_addresses',\n  'get_dtrust_network_fee_estimate', 'create_notification', 'disable_notification',\n  'enable_notification', 'get_notifications', 'get_recent_notification_events',\n  'delete_notification', 'validate_api_key', 'sign_transaction', 'finalize_transaction'\n];\n\n// withdrawal methods that need local signing\nBlockIo.WITHDRAWAL_METHODS = [\n  'withdraw', 'withdraw_from_user', 'withdraw_from_label',\n  'withdraw_from_address', 'withdraw_from_labels', 'withdraw_from_addresses',\n  'withdraw_from_users', 'withdraw_from_dtrust_address',\n  'withdraw_from_dtrust_labels'\n];\n\nBlockIo.SWEEP_METHODS = ['sweep_from_address'];\n\nBlockIo.prototype._withdraw = function (method, path, args, cb) {\n  if (!args || typeof(args) !== 'object') args = {};\n\n  // check for pin\n  var pin = null;\n  var pinSupplied = (typeof(args.pin) !== 'undefined');\n\n  if (pinSupplied || typeof(this.pin) != 'undefined')\n    pin = pinSupplied ? args.pin : this.pin;\n\n\n  // add pin to args for v1, remove for v2;\n  if (this.version == 1) {\n    if (!pin) return cb(new Error(ERR_PIN_MIS));\n    args.pin = pin;\n  } else {\n    delete args.pin;\n  }\n\n  var self = this;\n  return this._request(method, path, args, function (e, res) {\n\n    if (e) return cb(e, res);\n\n    if (typeof(res) !== 'object' ||\n      typeof(res.data) !== 'object' ||\n      !res.data.hasOwnProperty('reference_id')) return cb(e, res);\n\n    //if we're doing dtrust, return the intermediate object for manual signing.\n    if (!res.data.encrypted_passphrase ||\n      !res.data.encrypted_passphrase.passphrase)\n        return cb(e, res);\n\n    // if no pin was supplied and allowNoPin flag was set,\n    // return the response for signing asynchronously,\n    // else return pin error\n    if (!pin)\n      return (self.options.allowNoPin) ? cb(e, res) : cb(new Error(ERR_PIN_INV));\n\n    // If we get here, Block.io's asking us to provide client-side signatures\n    var encrypted_passphrase = res.data.encrypted_passphrase.passphrase;\n    var aesKey = self.aesKey || helper.pinToKey(pin);\n    var privkey = helper.extractKey(encrypted_passphrase, aesKey);\n\n    if (!(privkey instanceof ECKey))\n      return cb(new Error(ERR_PK_EXTR));\n\n    var pubkey = privkey.pub.toHex();\n    if (pubkey != res.data.encrypted_passphrase.signer_public_key)\n      return cb(new Error(ERR_PIN_INV));\n\n    res.data.inputs = helper.signInputs(privkey, res.data.inputs);\n\n    aesKey = '';\n    privkey = null;\n\n    self._request(method, 'sign_and_finalize_withdrawal', {\n      signature_data: JSON.stringify(res.data)\n    }, cb);\n\n  });\n\n};\n\nBlockIo.prototype._sweep = function (method, path, args, cb) {\n  var key = null;\n\n  if (!args || typeof(args) !== 'object' || typeof(args.private_key) !== 'string')\n    return cb(new Error(ERR_WIF_MIS), args);\n\n  if (!args.to_address) return cb(new Error(ERR_DEST_MIS));\n\n  try {\n    key = ECKey.fromWIF(args.private_key);\n  } catch (ex) {\n    return cb(ex);\n  }\n\n  if (!(key instanceof ECKey)) return cb(new Error(ERR_WIF_INV));\n\n  args.public_key = key.pub.toHex();\n  delete args.private_key;\n\n  var self = this;\n  this._request(method, path, args, function (e, res) {\n    if (e) return cb(e, res);\n\n    if (typeof(res) !== 'object' ||\n      typeof(res.data) !== 'object' ||\n      !res.data.hasOwnProperty('reference_id')) return cb(e, res);\n\n    res.data.inputs = helper.signInputs(key, res.data.inputs);\n\n    key = null;\n\n    self._request(method, 'sign_and_finalize_sweep', {\n      signature_data: JSON.stringify(res.data)\n    }, cb);\n\n  });\n\n};\n\nBlockIo.prototype._constructURL = function (path, query) {\n  return [\n    'https://',\n    this.server, (this.server) ? '.' : '',            // eg: 'dev.'\n    BlockIo.HOST,                                     // block.io\n    (this.port) ? ':' : '', this.port,                // eg: :80\n    '/api/v', (this.version).toString(10), '/',       // eg: /api/v1/\n    path,                                             // eg: get_balance\n    query ? ['?', qs.stringify(query)].join('') : ''  // eg: ?api_key=abc\n  ].join('');\n};\n\nBlockIo.prototype._request = function (method, path, args, cb) {\n  var opts = {\n    method: method,\n    secureProtocol: 'TLSv1_2_method',\n    headers: { 'User-Agent': BlockIo.USER_AGENT }\n  };\n\n  switch (method) {\n    case 'POST':\n      opts.headers['Content-Type'] = 'application/x-www-form-urlencoded';\n      opts.url = this._constructURL(path, {api_key: this.key}),\n      opts.body = qs.stringify(args);\n      break;\n    default:\n      opts.url = this._constructURL(path),\n      args.api_key = this.key;\n      opts.qs = args;\n  }\n\n  return cb ? request(opts, BlockIo.parseResponse(cb)) : request(opts);\n};\n\nBlockIo.parseResponse = function (cb) {\n\n  return function (err, res, body) {\n    if (err) return cb(err);\n\n    var errOut = null;\n    var errMsg = ERR_UNKNOWN;\n    var data = null;\n\n    try {\n      data = JSON.parse(body);\n    } catch (ex) {\n      errOut = ex;\n    }\n\n    if (data !== null && (typeof(data) !== 'object' || data.status !== 'success')) {\n      if (data.error_message) errMsg = data.error_message;\n      if (data.data && typeof(data.data) === 'object' &&\n        data.data.error_message) errMsg = data.data.error_message;\n      errOut = new Error(errMsg);\n    }\n\n    return cb(errOut, data);\n  };\n\n};\n\nBlockIo.prototype.validate_key = function (cb) {\n  // Test if the key is valid by doing a simple balance check\n\n  this._request('GET', 'get_balance', {}, function (err, doc) {\n    var errOut = err ||\n      (doc.status === 'success') ? null : new Error(ERR_KEY_INV);\n    return cb(errOut, (errOut === null));\n  });\n\n};\n\nBlockIo.prototype._cloneOptions = function (options) {\n  var self = this;\n  Object.keys(options).forEach(function (k) {\n    self.options[k] = options[k];\n  });\n};\n\nBlockIo._constructMethod = function (type, callMethod) {\n  var fn = ['_', type].join('');\n  return function (args, cb) {\n\n    // handle overload for function (cb), without args\n    if (!cb && typeof(args) === 'function') {\n      cb = args;\n      args = {};\n    }\n\n    this[fn]('POST', callMethod, args, cb);\n  };\n};\n\n// generate methods for each valid call method\nBlockIo.PASSTHROUGH_METHODS.forEach(function (method) {\n  BlockIo.prototype[method] = BlockIo._constructMethod('request', method);\n});\n\nBlockIo.WITHDRAWAL_METHODS.forEach(function (method) {\n  BlockIo.prototype[method] = BlockIo._constructMethod('withdraw', method);\n});\n\nBlockIo.SWEEP_METHODS.forEach(function (method) {\n  BlockIo.prototype[method] = BlockIo._constructMethod('sweep', method);\n});\n","/home/travis/build/npmtest/node-npmtest-block_io/node_modules/block_io/lib/helper.js":"var crypto = require('crypto');\nvar pkbdf2 = require('pbkdf2-sha256');\nvar ECKey = require('./key');\n\nvar Helper = module.exports = {};\n\nvar NULL_IV = new Buffer(0);\n\nHelper.encrypt = function (data, key) {\n\n\tif (!Buffer.isBuffer(key)) key = new Buffer(key, 'base64');\n\n\tvar cipher = crypto.createCipheriv('aes-256-ecb', key, NULL_IV);\n\n\tvar bufs = [];\n\tbufs.push(cipher.update(data, 'utf-8'));\n\tbufs.push(cipher.final());\n\n\tvar ctLength = bufs[0].length + bufs[1].length;\n\tvar ciphertext = Buffer.concat(bufs, ctLength);\n\n\treturn ciphertext.toString('base64');\n};\n\nHelper.decrypt = function (ciphertext, key) {\n\n\tif (!Buffer.isBuffer(key)) key = new Buffer(key, 'base64');\n\n\tvar cipher = crypto.createDecipheriv('aes-256-ecb', key, NULL_IV);\n\n\tvar bufs = [];\n\tbufs.push(cipher.update(ciphertext, 'base64'));\n\tbufs.push(cipher.final());\n\n\tvar tLength = bufs[0].length + bufs[1].length;\n\tvar text = Buffer.concat(bufs, tLength);\n\n\treturn text.toString('utf-8');\n};\n\nHelper.pinToKey = function (pin, salt, iterations) {\n\tif (!salt) salt = '';\n\tif (!iterations) iterations = 2048;\n\n\tvar buf = pkbdf2(pin, salt, iterations / 2, 16);\n\tbuf = pkbdf2(buf.toString('hex'), salt, iterations / 2, 32);\n\n\treturn buf.toString('base64');\n};\n\nHelper.extractKey = function (encrypted_data, b64_enc_key) {\n\tvar decrypted = this.decrypt(encrypted_data, b64_enc_key);\n\treturn ECKey.fromPassphrase(decrypted);\n};\n\nHelper.signInputs = function (privkey, inputs) {\n\tif (!(privkey instanceof ECKey)) return inputs;\n\n\tvar pubkey = privkey.pub.toHex();\n\n    inputs.forEach(function (input) {\n      input.signers.forEach(function (signer) {\n\n        if (signer.signer_public_key !== pubkey) return;\n        signer.signed_data = privkey.signHex(input.data_to_sign);\n\n      });\n    });\n\n    return inputs;\n};\n","/home/travis/build/npmtest/node-npmtest-block_io/node_modules/block_io/lib/key.js":"var crypto = require('crypto');\nvar util = require('util');\nvar assert = require('assert');\n\nvar Bitcoin = require('bitcoinjs-lib');\nvar BigInteger = require('bigi');\n\nvar Key = module.exports = function (d, compressed) {\n\tif (d) {\n\t\tBitcoin.ECKey.call(this, d, compressed);\n\t} else {\n\t\tvar newKey = Bitcoin.ECKey.makeRandom();\n\t\tBitcoin.ECKey.call(this, newKey.d, true);\n\t}\n};\n\n// inherit prototype\nutil.inherits(Key, Bitcoin.ECKey);\n\n// inherit static properties\nKey.curve = Bitcoin.ECKey.curve;\n\n// helper to cast static ECKey factories\nKey._fromSuper = function (key) {\n\tif (!(key instanceof Bitcoin.ECKey)) return key;\n\treturn new Key(key.d, key.pub.compressed);\n};\n\n// inherit factory ECKey.makeRandom();\nKey.makeRandom = function () {\n\tvar key = Bitcoin.ECKey.makeRandom.apply(Bitcoin.ECKey, arguments);\n\treturn this._fromSuper(key);\n};\n\n// inherit factory ECKey.makeRandom();\nKey.fromWIF = function () {\n\tvar key = Bitcoin.ECKey.fromWIF.apply(Bitcoin.ECKey, arguments);\n\treturn this._fromSuper(key);\n};\n\nKey.prototype.signHex = function (hexData) {\n\tvar buf = new Buffer(hexData, 'hex');\n\treturn this.sign(buf).toDER().toString('hex');\n};\n\nKey.prototype.sign = function (buf) {\n\treturn Bitcoin.ecdsa.sign(Bitcoin.ECKey.curve, buf, this.d);\n};\n\nKey.fromBuffer = function (buf) {\n\tassert(Buffer.isBuffer(buf));\n\tvar d = BigInteger.fromBuffer(buf);\n\treturn new Key(d, true);\n};\n\nKey.fromHex = function (hexKey) {\n\treturn this.fromBuffer(new Buffer(hexKey, 'hex'));\n};\n\nKey.fromPassphrase = function(pass) {\n\tvar buf = Buffer.isBuffer(pass) ? pass : new Buffer(pass, 'hex');\n\tbuf = crypto.createHash('sha256').update(buf).digest();\n\treturn this.fromBuffer(buf);\n};\n\nKey.fromPassphraseString = function(pass) {\n\treturn this.fromPassphrase(new Buffer(pass));\n};\n","/home/travis/build/npmtest/node-npmtest-block_io/node_modules/block_io/data/networks.js":"var Bitcoin = require('bitcoinjs-lib');\n\n// extend known network params with dogecoin and litecoin testnets\nBitcoin.networks.dogecoin_testnet = {\n  magicPrefix: '\\x18Dogecoin Signed Message:\\n',\n  bip32: {\n    public: 0x0432a9a8,\n    private: 0x0432a243\n  },\n  pubKeyHash: 0x71,\n  scriptHash: 0xc4,\n  wif: 241,\n  dustThreshold: 100000000,\n  feePerKb: 100000000,\n};\n\nBitcoin.networks.litecoin_testnet = {\n  magicPrefix: '\\x18Litecoin Signed Message:\\n',\n  bip32: {\n    public: 0x0436ef7d,\n    private: 0x0436f6e1\n  },\n  pubKeyHash: 0x6f,\n  scriptHash: 0xc4,\n  wif: 0xef,\n  dustThreshold: 100000,\n  feePerKb: 100000\n};\n"}